---
description: Cursor-specific project setup and optimization patterns
globs: [".cursor/*", "*.mdc"]
alwaysApply: false
---

# 🔧 Cursor Project Setup Optimization

Based on [Cursor Rules Documentation](https://docs.cursor.com/en/context/rules), this rule optimizes how we set up and manage Cursor projects for maximum AI collaboration efficiency.

## 📁 Optimal Cursor Project Structure

```
project/
├── .cursor/
│   └── rules/
│       ├── system-core-understanding.mdc      # Always applied, core behavior
│       ├── fast-initialization.mdc            # Always applied, zero-lookup init
│       ├── project-organization-structure.mdc # Always applied, clean architecture
│       ├── meta-system-prompt-integration.mdc # Always applied, continuous improvement
│       ├── auto-template-generation.mdc       # Auto-attached, template creation
│       ├── system-behavior-optimization.mdc   # Auto-attached, performance analysis
│       ├── meta-optimization-mode.mdc         # Manual trigger for self-improvement
│       ├── domain-specific-rules.mdc          # Auto-attached by file patterns
│       └── user-preferences.mdc               # Always applied, communication style
├── automation-systems/                       # Organized subsystem structure
│   └── {domain}/                             # Individual automation systems
├── templates/                                 # Auto-generated reusable patterns
└── .cursorrules                              # Legacy (migrate to .cursor/rules)
```

## 🎯 Rule Types & Usage Patterns

### **Always Applied Rules** (Core System Behavior)
```mdc
---
description: Core behavior for all interactions
alwaysApply: true
---
```
- System understanding and capabilities
- User communication patterns
- Performance optimization behaviors

### **Auto-Attached Rules** (Context-Aware)
```mdc
---
description: Data processing automation patterns
globs: ["*.csv", "*.json", "data/*", "reports/*"]
alwaysApply: false
---
```
- Domain-specific enhancement patterns
- File-type specific optimizations
- Context-aware building behaviors

### **Manual Rules** (On-Demand Features)
```mdc
---
description: Meta optimization mode
globs: []
alwaysApply: false
---
```
- Triggered by specific keywords or commands
- Advanced features and specialized modes
- System self-improvement capabilities

## 🚀 Cursor-Optimized Automation Patterns

### **1. Intelligent Context Inclusion**

**Use file references in rules:**
```mdc
---
description: Data processing with templates
---

When building data processors, use these proven patterns:

@templates/csv-processor-template.py
@templates/validation-patterns.json
```

**This provides the AI with template context automatically when the rule triggers.**

### **2. Nested Rule Organization**

```
project/
├── .cursor/rules/                    # Global project rules
├── backend/
│   └── .cursor/rules/               # Backend-specific rules
├── data-processing/
│   └── .cursor/rules/               # Data processing rules
└── api-integrations/
    └── .cursor/rules/               # API-specific rules
```

### **3. Performance-Optimized Rule Writing**

**✅ Good Rule Structure:**
```mdc
---
description: Concise, specific description for AI decision-making
globs: ["specific/*.patterns"]
alwaysApply: false
---

# Focused, Actionable Instructions

Specific patterns and examples that the AI can immediately apply.

@reference-file.js
```

**❌ Avoid:**
- Vague descriptions
- Rules over 500 lines
- Overlapping glob patterns
- Generic instructions without examples

## 🧠 AI Collaboration Optimization

### **Rule-Based System Understanding**
Instead of requiring the AI to explore and understand the system through multiple tool calls:

1. **Embed knowledge in always-applied rules** → Instant understanding
2. **Use auto-attached rules for context** → Automatic domain expertise
3. **Provide manual rules for advanced features** → On-demand capabilities

### **Context-Aware Enhancement Engine**
```mdc
---
description: Intelligent enhancement patterns
globs: ["*.csv", "*.json", "data/*"]
alwaysApply: false
---

# Context-Aware Data Processing Enhancements

When working with data files, automatically consider:

1. **File size patterns:**
   - Small files (<10MB): Direct processing
   - Large files (>10MB): Streaming with progress
   - Very large (>100MB): Chunked processing with optimization

2. **Data quality patterns:**
   - Headers present: Schema validation
   - Missing data: Interpolation or exclusion options
   - Mixed formats: Flexible parsing with error recovery

3. **Integration opportunities:**
   - API docs in workspace: Prepare for sync capabilities
   - Report templates present: Auto-generate formatted outputs
   - Database configs: Ready for direct data pipeline

@templates/data-processing-patterns.json
```

### **Communication Style Optimization**
```mdc
---
description: User communication preferences
alwaysApply: true
---

# Adaptive Communication Patterns

**Based on user input style, adapt responses:**

Technical/Direct Input → BUILD_MODE Response:
- Brief progress updates
- Focus on results and performance
- Minimal explanations unless requested

Question-rich/Exploratory Input → LEARN_MODE Response:
- Detailed explanations and alternatives  
- Concept connections and broader patterns
- Teaching moments integrated naturally

Balanced Input → BALANCED Response:
- Clear explanations with optional depth
- Efficient building with learning opportunities
- Adapt based on follow-up questions
```

## 🔧 Migration from Legacy .cursorrules

### **Automated Migration Pattern**
```javascript
// Convert .cursorrules to modern .cursor/rules structure
function migrateLegacyRules(cursorrules_content) {
  return {
    'system-behavior.mdc': extractSystemBehavior(cursorrules_content),
    'communication-style.mdc': extractCommunicationPreferences(cursorrules_content),
    'domain-patterns.mdc': extractDomainLogic(cursorrules_content)
  };
}
```

### **Benefits of Migration:**
- **Better organization** → Focused, composable rules
- **Context awareness** → Auto-attachment based on file patterns  
- **Performance** → Reduced rule processing overhead
- **Collaboration** → Team-wide rule sharing and version control

## 📊 Rule Performance Monitoring

### **Track Rule Effectiveness:**
```javascript
const ruleMetrics = {
  'system-core-understanding.mdc': {
    initialization_time: 'instant', // vs. previous 30+ seconds
    tool_calls_saved: 5, // vs. previous multiple file reads
    user_satisfaction: 'improved_clarity'
  },
  'fast-initialization.mdc': {
    first_response_time: '<5_seconds',
    context_accuracy: '95%+',
    enhancement_prediction: 'improved'
  }
};
```

### **Optimization Indicators:**
- Rules that frequently need manual invocation → Consider auto-attachment
- Rules with overlapping descriptions → Consolidate or refine scoping
- Rules with low usage → Archive or merge with related rules

## 🚀 Enhanced System Capabilities

### **Auto-Template Generation & Meta-Learning**
- **Template Automation**: Successful builds automatically become reusable `.mdc` templates
- **System Evolution**: Continuous prompt optimization through behavioral analysis  
- **Performance Intelligence**: Automatic identification and resolution of performance issues
- **Clean Architecture**: Enforced project organization with subsystem isolation

### **Context-Aware Enhancement Engine**
- **Template Selection**: Automatic selection of best templates based on requirements
- **Pattern Recognition**: Success patterns applied automatically to new builds
- **Dependency Intelligence**: Smart dependency validation and auto-installation
- **Cross-Platform Optimization**: OS-aware command generation and execution

This enhanced Cursor-optimized setup provides **instant AI understanding** with **context-aware intelligence**, **automatic template generation**, **continuous system improvement**, and **enforced clean architecture** while following [Cursor's rule best practices](https://docs.cursor.com/en/context/rules).